"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

enum UserStatus {
  ACTIVE @enum(value: 1)
  DISABLED @enum(value: 0)
}

enum Role {
  ADMIN @enum(value: 1)
  USER @enum(value: 2)
}

type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")

    clubs(klabana: Int @eq): [Club!]! @paginate(type: "paginator" model: "App\\Club")
    club(id: ID @eq): Club @find(model: "App\\Club")

    events: [Event!]! @paginate(type: "paginator" model: "App\\Event")
    event(id: ID @eq): Event @find(model: "App\\Event")
}

type Mutation {
    createClub(input: CreateClubInput! @spread): Club @create(model: "App\\Club")

    updateClub(input: UpdateClubInput! @spread): Club @update(model: "App\\Club")

    deleteClub(id: ID!): Club @delete(model: "App\\Club")

    createEvent(
        club_id: Int!
        name: String!
        description: String!
        start_time: DateTime!
        end_time: DateTime!
        place: String!
        country: String!
        city: String!
        street: String!
        zip: String!
        latitude: String!
        longitude: String!
        image: String!
    ): Event @create(model: "App\\Event")

    updateEvent(
        id: ID!
        club_id: Int
        name: String
        description: String
        start_time: DateTime
        end_time: DateTime
        place: String
        country: String
        city: String
        street: String
        zip: String
        latitude: String
        longitude: String
        image: String
    ): Event @update(model: "App\\Event")

    deleteEvent(id: ID!): Event @delete(model: "App\\Event")
}

input CreateClubInput {
    name: String!
    image: String!
    klabana: Int!
    phone: String!
    rank: Int!
    users: CreateUserRelation!
}

input CreateUserRelation {
    connect: [ID!]
}

input UpdateClubInput {
    id: ID!
    name: String
    image: String
    klabana: Int
    phone: String
    rank: Int
    users: UpdateUserRelation
}

input UpdateUserRelation {
    disconnect: [ID!]
    connect: [ID!]
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    status: UserStatus!
    role: Role!
    created_at: DateTime!
    updated_at: DateTime!
    clubs: [Club!]! @belongsToMany
}

type Club {
    id: ID!
    name: String!
    image: String!
    klabana: Int!
    phone: String!
    rank: Int!
    created_at: DateTime!
    updated_at: DateTime!
    users: [User!]! @belongsToMany
    events: [Event!]! @hasMany
}

type Event {
    id: ID!
    club_id: Int!
    name: String!
    description: String!
    start_time: DateTime!
    end_time: DateTime!
    place: String!
    country: String!
    city: String!
    street: String!
    zip: String!
    latitude: String!
    longitude: String!
    image: String!
    created_at: DateTime!
    updated_at: DateTime!
    club: Club! @belongsTo
}